name: Build dcl-edit
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: 
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: "The version number of the build. Format `major.minor.patch`. E.g.: `2.1.24`"
    
jobs:
  build-dcl-edit:
    runs-on: self-hosted
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
        
      #- name: Cache Unity files
      #  uses: actions/cache@v3
      #  with:
      #    path: ${{ github.workspace }}\Library
      #    key: unity-library
      #    restore-keys: unity-
      
      - name: Create new branch
        run: |
          git branch -c ref/feautre/release_version_${{ github.event.inputs.version }}
          git checkout ref/feautre/release_version_${{ github.event.inputs.version }}
      
      - name: Update Version number to ${{ github.event.inputs.version }}
        run: C:\Users\Administrator\repos\workflow\changeVersionNumber.ps1 -projectPath ${{ github.workspace }} -version ${{ github.event.inputs.version }}
        
      - name: Fake build
        run: |
          New-Item -Path ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-windows-x86 -ItemType Directory
          Set-Content ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-windows-x86\dcl-edit.exe.txt -Value "I am a Windows executable"
          New-Item -Path ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-linux -ItemType Directory
          Set-Content ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-linux\dcl-edit.txt -Value "I am a Linux executable"
          New-Item -Path ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-macos.app -ItemType Directory
          Set-Content ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-macos.app\macapp.txt -Value "I am a Mac executable"
        
      #- name: Build All
      #  shell: cmd
      #  run: >
      #    start "Build" /wait "c:\Program Files\Unity\Hub\Editor\2020.3.21f1\Editor\Unity.exe" 
      #    -projectPath ${{ github.workspace }} 
      #    -batchmode 
      #    -buildWindowsPlayer ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-windows-x86\dcl-edit.exe 
      #    -buildLinux64Player ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-linux\dcl-edit
      #    -buildOSXUniversalPlayer ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-macos.app
      #    -quit
          
      #- name: Build Windows
      #  shell: cmd
      #  run: >
      #    start "Build" /wait "c:\Program Files\Unity\Hub\Editor\2020.3.21f1\Editor\Unity.exe" 
      #    -projectPath ${{ github.workspace }} 
      #    -batchmode 
      #    -buildWindowsPlayer ${{ github.workspace }}\Build\dcl-edit-version-windows-x86\dcl-edit.exe 
      #    -quit
      #    
      #- name: Build Linux
      #  shell: cmd
      #  run: >
      #    start "Build" /wait "c:\Program Files\Unity\Hub\Editor\2020.3.21f1\Editor\Unity.exe" 
      #    -projectPath ${{ github.workspace }} 
      #    -batchmode 
      #    -buildLinux64Player ${{ github.workspace }}\Build\dcl-edit-version-linux\dcl-edit
      #    -quit
      #    
      #- name: Build Mac
      #  shell: cmd 
      #  run: >
      #    start "Build" /wait "c:\Program Files\Unity\Hub\Editor\2020.3.21f1\Editor\Unity.exe" 
      #    -projectPath ${{ github.workspace }} 
      #    -batchmode 
      #    -buildOSXUniversalPlayer ${{ github.workspace }}\Build\dcl-edit-version-macos.app
      #    -quit
      
      - name: Pack builds
        run: |
          7z a ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-windows-x86.tar ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-windows-x86
          7z a ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-windows-x86.tar.gz ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-windows-x86.tar -mx=9
          7z a ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-linux.tar ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-linux
          7z a ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-linux.tar.gz ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-linux.tar -mx=9
          7z a ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-macos.tar ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-macos.app
          7z a ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-macos.tar.gz ${{ github.workspace }}\Build\dcl-edit-${{ github.event.inputs.version }}-macos.tar -mx=9
      
      - name: Commit and push version number update
        run: |
          git commit -am "Updated verion number to ${{ github.event.inputs.version }}"
          git push origin HEAD
           
      - name: Create tag
        run: |
          git tag ${{ github.event.inputs.version }}
          git push --tags
          
      - name: GH Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: "${{ github.event.inputs.version }}"
          name: "Release ${{ github.event.inputs.version }}"
          body: "This is a very cool Release (Version: ${{ github.event.inputs.version }})"
          files: |
            Build/dcl-edit-${{ github.event.inputs.version }}-windows-x86.tar.gz
            Build/dcl-edit-${{ github.event.inputs.version }}-linux.tar.gz
            Build/dcl-edit-${{ github.event.inputs.version }}-macos.tar.gz
          fail_on_unmatched_files: true
          token: ${{ secrets.GH_TOKEN }}
      
      - name: create pull request
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: >
          gh pr create 
          --repo cblech/dcl-edit-automation 
          --base Refactoring 
          --head ref/feautre/release_version_${{ github.event.inputs.version }} 
          --title "Release of version ${{ github.event.inputs.version }}"
          --body "this is some cool description for this pull request"
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          # Artifact name
          name: Some build # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{ github.workspace }}\Build
          

          
